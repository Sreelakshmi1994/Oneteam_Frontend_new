"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var util_1 = __importDefault(require("util"));
var v4_1 = __importDefault(require("uuid/v4"));
var stream_1 = __importDefault(require("stream"));
var Logger_1 = require("./Logger");
var Brotli_1 = require("./compressions/Brotli");
var Gzip_1 = require("./compressions/Gzip");
var constants_1 = require("./constants");
var Deflate_1 = require("./compressions/Deflate");
/**
 * Compressing files.
 */
var Gzipper = /** @class */ (function () {
    /**
     * Creates an instance of Gzipper.
     */
    function Gzipper(target, outputPath, options) {
        if (options === void 0) { options = {}; }
        this.outputFileFormatRegexp = constants_1.OUTPUT_FILE_FORMAT_REGEXP;
        this.nativeFs = {
            stat: util_1.default.promisify(fs_1.default.stat),
            lstat: util_1.default.promisify(fs_1.default.lstat),
            readdir: util_1.default.promisify(fs_1.default.readdir),
            mkdir: util_1.default.promisify(fs_1.default.mkdir),
        };
        this.nativeStream = {
            pipeline: util_1.default.promisify(stream_1.default.pipeline),
        };
        this.logger = new Logger_1.Logger(options.verbose);
        if (!target) {
            var message = "Can't find a path.";
            this.logger.error(message, true);
            throw new Error(message);
        }
        this.options = options;
        if (outputPath) {
            this.outputPath = path_1.default.resolve(process.cwd(), outputPath);
        }
        this.compressionInstance = this.getCompressionInstance();
        this.target = path_1.default.resolve(process.cwd(), target);
        this.createCompression = this.compressionInstance.getCompression();
        this.validExtensions = this.getValidExtensions();
    }
    /**
     * Start compressing files.
     */
    Gzipper.prototype.compress = function () {
        return __awaiter(this, void 0, void 0, function () {
            var files, error_1, filesCount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        if (!this.outputPath) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.createFolders(this.outputPath)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.compressionLog();
                        return [4 /*yield*/, this.compileFolderRecursively(this.target)];
                    case 3:
                        files = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        this.logger.error(error_1, true);
                        throw new Error(error_1.message);
                    case 5:
                        filesCount = files.length;
                        if (filesCount) {
                            this.logger.success(filesCount + " " + (filesCount > 1 ? 'files have' : 'file has') + " been compressed.", true);
                        }
                        else {
                            this.logger.warn("we couldn't find any appropriate files. valid extensions are: " + constants_1.VALID_EXTENSIONS.join(', '), true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Return compression instance.
     */
    Gzipper.prototype.getCompressionInstance = function () {
        if (this.options.brotli) {
            return new Brotli_1.BrotliCompression(this.options, this.logger);
        }
        else if (this.options.deflate) {
            return new Deflate_1.DeflateCompression(this.options, this.logger);
        }
        else {
            return new Gzip_1.GzipCompression(this.options, this.logger);
        }
    };
    /**
     * Compile files in folder recursively.
     */
    Gzipper.prototype.compileFolderRecursively = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            var compressedFiles, isFileTarget, filesList, targetParsed, _i, filesList_1, file, filePath, isFile, isDirectory, _a, _b, _c, fileSize, hrtimeStart, fileInfo, _d, seconds, nanoseconds, error_2, error_3;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 17, , 18]);
                        compressedFiles = [];
                        return [4 /*yield*/, this.nativeFs.lstat(target)];
                    case 1:
                        isFileTarget = (_e.sent()).isFile();
                        filesList = void 0;
                        if (!isFileTarget) return [3 /*break*/, 2];
                        targetParsed = path_1.default.parse(target);
                        target = targetParsed.dir;
                        filesList = [targetParsed.base];
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.nativeFs.readdir(target)];
                    case 3:
                        filesList = _e.sent();
                        _e.label = 4;
                    case 4:
                        _i = 0, filesList_1 = filesList;
                        _e.label = 5;
                    case 5:
                        if (!(_i < filesList_1.length)) return [3 /*break*/, 16];
                        file = filesList_1[_i];
                        filePath = path_1.default.resolve(target, file);
                        return [4 /*yield*/, this.nativeFs.lstat(filePath)];
                    case 6:
                        isFile = (_e.sent()).isFile();
                        return [4 /*yield*/, this.nativeFs.lstat(filePath)];
                    case 7:
                        isDirectory = (_e.sent()).isDirectory();
                        if (!isDirectory) return [3 /*break*/, 9];
                        _b = (_a = compressedFiles.push).apply;
                        _c = [compressedFiles];
                        return [4 /*yield*/, this.compileFolderRecursively(filePath)];
                    case 8:
                        _b.apply(_a, _c.concat([(_e.sent())]));
                        return [3 /*break*/, 15];
                    case 9:
                        if (!isFile) return [3 /*break*/, 15];
                        _e.label = 10;
                    case 10:
                        _e.trys.push([10, 14, , 15]);
                        if (!this.validExtensions.includes(path_1.default.extname(filePath))) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.nativeFs.lstat(filePath)];
                    case 11:
                        fileSize = (_e.sent()).size;
                        if (fileSize < this.options.threshold) {
                            return [3 /*break*/, 15];
                        }
                        hrtimeStart = process.hrtime();
                        compressedFiles.push(filePath);
                        return [4 /*yield*/, this.compressFile(file, target, this.outputPath)];
                    case 12:
                        fileInfo = _e.sent();
                        if (fileInfo) {
                            _d = process.hrtime(hrtimeStart), seconds = _d[0], nanoseconds = _d[1];
                            this.logger.info("File " + file + " has been compressed " + fileInfo.beforeSize.toFixed(4) + "Kb -> " + fileInfo.afterSize.toFixed(4) + "Kb (" + (seconds ? seconds + 's ' : '') + nanoseconds / 1e6 + "ms)");
                        }
                        _e.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        error_2 = _e.sent();
                        throw error_2;
                    case 15:
                        _i++;
                        return [3 /*break*/, 5];
                    case 16: return [2 /*return*/, compressedFiles];
                    case 17:
                        error_3 = _e.sent();
                        throw error_3;
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * File compression.
     */
    Gzipper.prototype.compressFile = function (filename, target, outputDir) {
        return __awaiter(this, void 0, void 0, function () {
            var inputPath, isFileTarget, outputPath, beforeSize, afterSize;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputPath = path_1.default.join(target, filename);
                        if (!outputDir) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.nativeFs.lstat(this.target)];
                    case 1:
                        isFileTarget = (_a.sent()).isFile();
                        target = isFileTarget
                            ? outputDir
                            : path_1.default.join(outputDir, path_1.default.relative(this.target, target));
                        return [4 /*yield*/, this.createFolders(target)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        outputPath = this.getOutputPath(target, filename);
                        return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(inputPath), this.createCompression(), fs_1.default.createWriteStream(outputPath))];
                    case 4:
                        _a.sent();
                        if (!this.options.verbose) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.nativeFs.stat(inputPath)];
                    case 5:
                        beforeSize = (_a.sent()).size / 1024;
                        return [4 /*yield*/, this.nativeFs.stat(outputPath)];
                    case 6:
                        afterSize = (_a.sent()).size / 1024;
                        return [2 /*return*/, { beforeSize: beforeSize, afterSize: afterSize }];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Show message with compression params.
     */
    Gzipper.prototype.compressionLog = function () {
        var options = this.compressionInstance.readableOptions();
        this.logger.warn(options, true);
        if (!this.options.outputFileFormat) {
            this.logger.info('Default output file format: [filename].[ext].[compressExt]');
        }
    };
    /**
     * Create folders by path.
     */
    Gzipper.prototype.createFolders = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.nativeFs.mkdir(target, { recursive: true })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get output path which is based on [outputFileFormat].
     */
    Gzipper.prototype.getOutputPath = function (target, file) {
        var artifactsMap = new Map([
            ['[filename]', path_1.default.parse(file).name],
            ['[ext]', path_1.default.extname(file).slice(1)],
            ['[compressExt]', this.compressionInstance.ext],
        ]);
        var filename = artifactsMap.get('[filename]') + "." + artifactsMap.get('[ext]') + "." + artifactsMap.get('[compressExt]');
        if (this.options.outputFileFormat) {
            artifactsMap.set('[hash]', null);
            filename = this.options.outputFileFormat.replace(this.outputFileFormatRegexp, function (artifact) {
                if (artifactsMap.has(artifact)) {
                    // Need to generate hash only if we have appropriate param
                    if (artifact === '[hash]') {
                        artifactsMap.set('[hash]', v4_1.default());
                    }
                    return artifactsMap.get(artifact);
                }
                else {
                    return artifact;
                }
            });
        }
        return "" + path_1.default.join(target, filename);
    };
    /**
     * Returns the filtered list of extensions from `options.exclude`.
     */
    Gzipper.prototype.getValidExtensions = function () {
        var excludeExtensions = this.options.exclude;
        var includeExtensions = this.options.include;
        if (excludeExtensions) {
            return constants_1.VALID_EXTENSIONS.filter(function (extension) { return !excludeExtensions.includes(extension); });
        }
        if (includeExtensions) {
            return includeExtensions;
        }
        return constants_1.VALID_EXTENSIONS;
    };
    return Gzipper;
}());
exports.Gzipper = Gzipper;
//# sourceMappingURL=data:application/json;base64,